name: Comprehensive Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  unit-tests:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Run unit tests with coverage
      run: npm run test:coverage
      env:
        MONGODB_URI: mongodb://localhost:27017/ai-job-finder-test
        NODE_ENV: test
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: frontend
        name: frontend-coverage
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: unit-test-results
        path: |
          coverage/
          test-results/

  python-tests:
    name: Python Agent Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('agents/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      run: |
        cd agents
        pip install -r requirements.txt
        pip install pytest-cov pytest-xvfb
    
    - name: Run Python tests with coverage
      run: |
        cd agents
        python -m pytest --cov=. --cov-report=xml --cov-report=html --junitxml=test-results.xml
    
    - name: Upload Python coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./agents/coverage.xml
        flags: python-agents
        name: python-coverage
    
    - name: Upload Python test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: python-test-results
        path: |
          agents/coverage.xml
          agents/htmlcov/
          agents/test-results.xml

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright browsers
      run: npx playwright install --with-deps ${{ matrix.browser }}
    
    - name: Build application
      run: npm run build
      env:
        MONGODB_URI: mongodb://localhost:27017/ai-job-finder-test
        NODE_ENV: test
    
    - name: Run E2E tests
      run: npx playwright test --project=${{ matrix.browser }}
      env:
        MONGODB_URI: mongodb://localhost:27017/ai-job-finder-test
        NODE_ENV: test
    
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-results-${{ matrix.browser }}
        path: |
          test-results/
          playwright-report/

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright
      run: npx playwright install --with-deps chromium
    
    - name: Build application
      run: npm run build
      env:
        MONGODB_URI: mongodb://localhost:27017/ai-job-finder-test
        NODE_ENV: test
    
    - name: Run performance tests
      run: npx playwright test performance.spec.ts --project=chromium
      env:
        MONGODB_URI: mongodb://localhost:27017/ai-job-finder-test
        NODE_ENV: test
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-results
        path: |
          test-results/
          playwright-report/

  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright
      run: npx playwright install --with-deps chromium
    
    - name: Build application
      run: npm run build
      env:
        MONGODB_URI: mongodb://localhost:27017/ai-job-finder-test
        NODE_ENV: test
    
    - name: Run accessibility tests
      run: npx playwright test accessibility.spec.ts --project=chromium
      env:
        MONGODB_URI: mongodb://localhost:27017/ai-job-finder-test
        NODE_ENV: test
    
    - name: Upload accessibility results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: accessibility-results
        path: |
          test-results/
          playwright-report/

  visual-regression-tests:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright
      run: npx playwright install --with-deps chromium
    
    - name: Build application
      run: npm run build
      env:
        MONGODB_URI: mongodb://localhost:27017/ai-job-finder-test
        NODE_ENV: test
    
    - name: Run visual regression tests
      run: npx playwright test visual-regression.spec.ts --project=chromium
      env:
        MONGODB_URI: mongodb://localhost:27017/ai-job-finder-test
        NODE_ENV: test
    
    - name: Upload visual test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: visual-regression-results
        path: |
          test-results/
          playwright-report/

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security tests
      run: npm test -- security/
      env:
        MONGODB_URI: mongodb://localhost:27017/ai-job-finder-test
        NODE_ENV: test
    
    - name: Run npm audit
      run: npm audit --audit-level=moderate
    
    - name: Upload security test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-test-results
        path: test-results/

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, python-tests, e2e-tests, performance-tests, accessibility-tests, visual-regression-tests, security-tests]
    if: always()
    
    steps:
    - name: Download all test artifacts
      uses: actions/download-artifact@v3
    
    - name: Generate test summary
      run: |
        echo "# Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Test Status" >> $GITHUB_STEP_SUMMARY
        echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Python Tests: ${{ needs.python-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- E2E Tests: ${{ needs.e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Accessibility Tests: ${{ needs.accessibility-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Visual Regression Tests: ${{ needs.visual-regression-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Security Tests: ${{ needs.security-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Coverage Reports" >> $GITHUB_STEP_SUMMARY
        echo "Coverage reports have been uploaded to Codecov." >> $GITHUB_STEP_SUMMARY
    
    - name: Check if all tests passed
      run: |
        if [[ "${{ needs.unit-tests.result }}" != "success" || 
              "${{ needs.python-tests.result }}" != "success" || 
              "${{ needs.e2e-tests.result }}" != "success" || 
              "${{ needs.performance-tests.result }}" != "success" || 
              "${{ needs.accessibility-tests.result }}" != "success" || 
              "${{ needs.visual-regression-tests.result }}" != "success" || 
              "${{ needs.security-tests.result }}" != "success" ]]; then
          echo "Some tests failed. Please check the individual job results."
          exit 1
        else
          echo "All tests passed successfully!"
        fi